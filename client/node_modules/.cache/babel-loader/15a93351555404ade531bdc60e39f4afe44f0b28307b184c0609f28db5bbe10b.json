{"ast":null,"code":"import _objectSpread from\"/Users/everittgill/Desktop/book-search-engine-graphql/Book-Search-Engine/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from'react';import{BrowserRouter as Router,Switch,Route}from'react-router-dom';import SearchBooks from'./pages/SearchBooks';import SavedBooks from'./pages/SavedBooks';import Navbar from'./components/Navbar';import{ApolloClient,ApolloProvider,InMemoryCache,createHttpLink}from'@apollo/client';import{setContext}from'@apollo/client/link/context';import Auth from'./utils/auth';// Construct our main GraphQL API endpoint\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var httpLink=createHttpLink({uri:'/graphql'});// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nvar authLink=setContext(function(_,_ref){var headers=_ref.headers;// get the authentication token from local storage if it exists\nvar token=Auth.getToken();// return the headers to the context so httpLink can read them\nreturn{headers:_objectSpread(_objectSpread({},headers),{},{authorization:token?\"Bearer \".concat(token):''})};});var client=new ApolloClient({// Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\nlink:authLink.concat(httpLink),cache:new InMemoryCache()});function App(){return/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"/\",component:SearchBooks}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/saved\",component:SavedBooks}),/*#__PURE__*/_jsx(Route,{render:function render(){return/*#__PURE__*/_jsx(\"h1\",{className:\"display-2\",children:\"Wrong page!\"});}})]})]})})});}export default App;","map":{"version":3,"names":["React","BrowserRouter","Router","Switch","Route","SearchBooks","SavedBooks","Navbar","ApolloClient","ApolloProvider","InMemoryCache","createHttpLink","setContext","Auth","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","httpLink","uri","authLink","_","_ref","headers","token","getToken","_objectSpread","authorization","concat","client","link","cache","App","children","exact","path","component","render","className"],"sources":["/Users/everittgill/Desktop/book-search-engine-graphql/Book-Search-Engine/client/src/App.js"],"sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport Auth from './utils/auth';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n\n\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = Auth.getToken();\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"oKAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,aAAa,GAAI,CAAAC,MAAM,CAAEC,MAAM,CAAEC,KAAK,KAAQ,kBAAkB,CACzE,MAAO,CAAAC,WAAW,KAAM,qBAAqB,CAC7C,MAAO,CAAAC,UAAU,KAAM,oBAAoB,CAC3C,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,OAASC,YAAY,CAAEC,cAAc,CAAEC,aAAa,CAAEC,cAAc,KAAQ,gBAAgB,CAC5F,OAASC,UAAU,KAAQ,6BAA6B,CACxD,MAAO,CAAAC,IAAI,KAAM,cAAc,CAE/B;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBACA,GAAM,CAAAC,QAAQ,CAAGT,cAAc,CAAC,CAC9BU,GAAG,CAAE,UACP,CAAC,CAAC,CAKF;AACA,GAAM,CAAAC,QAAQ,CAAGV,UAAU,CAAC,SAACW,CAAC,CAAAC,IAAA,CAAkB,IAAd,CAAAC,OAAO,CAAAD,IAAA,CAAPC,OAAO,CACvC;AACA,GAAM,CAAAC,KAAK,CAAGb,IAAI,CAACc,QAAQ,CAAC,CAAC,CAC7B;AACA,MAAO,CACLF,OAAO,CAAAG,aAAA,CAAAA,aAAA,IACFH,OAAO,MACVI,aAAa,CAAEH,KAAK,WAAAI,MAAA,CAAaJ,KAAK,EAAK,EAAE,EAEjD,CAAC,CACH,CAAC,CAAC,CAGF,GAAM,CAAAK,MAAM,CAAG,GAAI,CAAAvB,YAAY,CAAC,CAC9B;AACAwB,IAAI,CAAEV,QAAQ,CAACQ,MAAM,CAACV,QAAQ,CAAC,CAC/Ba,KAAK,CAAE,GAAI,CAAAvB,aAAa,CAAC,CAC3B,CAAC,CAAC,CAIF,QAAS,CAAAwB,GAAGA,CAAA,CAAG,CACb,mBACEnB,IAAA,CAACN,cAAc,EAACsB,MAAM,CAAEA,MAAO,CAAAI,QAAA,cAC/BpB,IAAA,CAACb,MAAM,EAAAiC,QAAA,cACLlB,KAAA,CAAAE,SAAA,EAAAgB,QAAA,eACEpB,IAAA,CAACR,MAAM,GAAE,CAAC,cACVU,KAAA,CAACd,MAAM,EAAAgC,QAAA,eACLpB,IAAA,CAACX,KAAK,EAACgC,KAAK,MAACC,IAAI,CAAC,GAAG,CAACC,SAAS,CAAEjC,WAAY,CAAE,CAAC,cAChDU,IAAA,CAACX,KAAK,EAACgC,KAAK,MAACC,IAAI,CAAC,QAAQ,CAACC,SAAS,CAAEhC,UAAW,CAAE,CAAC,cACpDS,IAAA,CAACX,KAAK,EAACmC,MAAM,CAAE,SAAAA,OAAA,qBAAMxB,IAAA,OAAIyB,SAAS,CAAC,WAAW,CAAAL,QAAA,CAAC,aAAW,CAAI,CAAC,EAAC,CAAE,CAAC,EAC7D,CAAC,EACT,CAAC,CACG,CAAC,CACO,CAAC,CAErB,CAEA,cAAe,CAAAD,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}